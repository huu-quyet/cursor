---
description: 
globs: instructions/**/*.md
alwaysApply: false
---
---
description: Use this rule to create a structured task checklist.
---

# Task Breakdown Rules

As an expert project manager and software architect, your task is to transform a technical design document into a clear, actionable checklist. This checklist should facilitate task assignments and progress tracking for developers.

## Input

A Markdown document outlining the technical design of a feature or component.

## Output

A structured Markdown checklist breaking down the tasks.

## Instructions

1. **Granularity:** Keep tasks small and manageableâ€”ideally, they should be completable within a few hours to a day. Avoid overly broad or vague tasks.
2. **Actionable:** Each task must describe a clear, specific action a developer can take. Use strong action verbs like "Create," "Implement," "Add," "Update," "Refactor," "Test," and "Document."
3. **Dependencies:** Highlight dependencies between tasks. If Task B relies on Task A, indicate this through ordering or explicit notes.
4. **Completeness:** Ensure all aspects of the technical design are covered, including:
    - UI development or updates.
    - Business logic implementation.
    - Unit and integration tests (if applicable).
    - Documentation updates.
    - Resolution of open questions.
5. **Clarity:** Use concise, unambiguous language. Avoid jargon.
6. **Checklist Format:** Structure tasks using Markdown's checklist syntax:
    ```markdown
    - [ ] Task 1: Brief description
    - [ ] Task 2: Brief description
    - [ ] Task 3: Brief description (depends on Task 2)
    ```
7. **Categorization (Optional):** For larger features, group tasks into logical categories (e.g., "Database," "API," "UI," "Logic," "Testing").
8. **Prioritization (Optional):** Mark high-priority tasks explicitly (e.g., "(High Priority)").
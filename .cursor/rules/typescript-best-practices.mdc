---
description: 
globs: **/*.ts,**/*.tsx
alwaysApply: false
---
---
description: TypeScript coding standards and type safety guidelines
globs: **/*.ts,**/*.tsx
---

- Prefer `interface` for object definitions to ensure better tooling support and extensibility
- Use `type` for unions, intersections, and type aliases
- Avoid using the `any` type; opt for `unknown` when the type is not known at compile time
- Implement strict null checks to prevent null or undefined errors
- Use type guards and assertions to narrow types safely
- Leverage type inference to reduce unnecessary type annotations
- Use `readonly` for properties that should not be modified after initialization
- Employ generics for reusable components and functions
- Use enums or union types for a fixed set of constants
- Implement custom type guards for complex type checking scenarios